service: authmgmt

frameworkVersion: '3'

package:
  patterns:
    - 'wsgi_handler.py'
    - 'serverless_wsgi.py'
    - 'api.py'
    - '.serverless-wsgi'
    - '!node_modules/**'
    - '!model/**'
    - '!.vscode/**'
    - '!libs'
    - '!.serverless'
    - '!runtime'
    - '!.gitignore'
    - '!env_json_loader.py'
    - '!.requirements'
    - '!.requirements.zip'
    - '!env.json'
    - '!env.example.json'
    - '!package-lock.json'
    - '!package.json'
    - '!pnpm-lock.json'
    - '!poetry.lock'
    - '!pyproject.toml'
    - '!README.md'
    - '!__pycache__'
    - '!pnpm-lock.yaml'
  exclude:
    - node_modules/**
    - model/**
    - .vscode/**
    - libs
    - .serverless
    - runtime
    - .gitignore
    - env_json_loader.py
    - .requirements
    - .requirements.zip
    - env.json
    - env.example.json
    - package-lock.json
    - package.json
    - pnpm-lock.json
    - poetry.lock
    - pyproject.toml
    - README.md
    - __pycache__
    - pnpm-lock.yaml

resources:
  Resources:
    AuthServiceBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: palapalado.tk

    AuthServiceBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: 'AuthServiceBucket'
        PolicyDocument:
          Statement:
            - Effect: 'Allow'
              Principal: '*'
              Action:
                - 's3:GetObject'
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: 'AuthServiceBucket'
                    - '/*'

    UserDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.UserTableName}
        AttributeDefinitions:
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: UserId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    RoleDynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PROVISIONED
        AttributeDefinitions:
          - AttributeName: RoleId
            AttributeType: S
          - AttributeName: RoleName
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: RoleName
            KeySchema:
              - AttributeName: RoleName
                KeyType: HASH
            Projection: 
              ProjectionType: ALL
            ProvisionedThroughput: 
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        KeySchema:
          - AttributeName: RoleId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.RoleTableName}

    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: LambdaRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ErpOCRDynamoDBWriteAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Sid: LambdaCloudWatchLog
                  Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Sid: LambdaDynamoDBTableAccess
                  Effect: Allow
                  Action:
                    - dynamodb:BatchGetItem
                    - dynamodb:BatchWriteItem
                    - dynamodb:ConditionCheckItem
                    - dynamodb:PutItem
                    - dynamodb:DescribeTable
                    - dynamodb:DeleteItem
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                    - dynamodb:UpdateItem
                  Resource:
                    - 'Fn::GetAtt': [UserDynamoTable, Arn]
                    - 'Fn::GetAtt': [RoleDynamoTable, Arn]
                - Sid: DynamoDBIndexAndStreamAccess
                  Effect: Allow
                  Action:
                    - dynamodb:GetShardIterator
                    - dynamodb:Scan
                    - dynamodb:Query
                    - dynamodb:DescribeStream
                    - dynamodb:GetRecords
                    - dynamodb:ListStreams
                  Resource:
                    - 'Fn::Join':
                        - '/'
                        - - 'Fn::GetAtt': [UserDynamoTable, Arn]
                          - 'index'
                          - '*'
                    - 'Fn::Join':
                        - '/'
                        - - 'Fn::GetAtt': [RoleDynamoTable, Arn]
                          - 'index'
                          - '*'
                    - 'Fn::Join':
                        - '/'
                        - - 'Fn::GetAtt': [UserDynamoTable, Arn]
                          - 'steam'
                          - '*'
                    - 'Fn::Join':
                        - '/'
                        - - 'Fn::GetAtt': [RoleDynamoTable, Arn]
                          - 'steam'
                          - '*'
                - Sid: DynamoDBDescribeLimitsAccess
                  Effect: Allow
                  Action: dynamodb:DescribeLimits
                  Resource:
                    - 'Fn::GetAtt': [UserDynamoTable, Arn]
                    - 'Fn::GetAtt': [RoleDynamoTable, Arn]
                    - 'Fn::Join':
                        - '/'
                        - - 'Fn::GetAtt': [UserDynamoTable, Arn]
                          - 'index'
                          - '*'
                    - 'Fn::Join':
                        - '/'
                        - - 'Fn::GetAtt': [RoleDynamoTable, Arn]
                          - 'index'
                          - '*'

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: palapalado.tk
        AliasAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties: 
        UserPoolId:
          Ref: 'UserPool'
        Domain: 'guard'


    UserPoolWebClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: palapaladoAuthmgmt
        GenerateSecret: false
        UserPoolId:
          Ref: 'UserPool'
        ExplicitAuthFlows:
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_PASSWORD_AUTH


    ApiAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: ApiAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [UserPool, Arn]
        IdentitySource: method.request.header.Authorization


  Outputs:
    AuthServiceBucketURL:
      Description: "Palapalado.tk Bucket Website URL"
      Value: 
        "Fn::GetAtt": [ AuthServiceBucket, WebsiteURL ]

    UserPoolId:
      Description: 'Palapalado Cognito User Pool ID'
      Value:
        Ref: 'UserPool'

    UserPoolWebClientId:
      Description: 'Palapalado Cognito User Pool Client ID'
      Value:
        Ref: 'UserPoolWebClient'

    UserDynamoDBTable:
      Description: 'DynamoDB ARN'
      Value:
        'Fn::GetAtt': [UserDynamoDBTable, Arn]

    RoleDynamoDBTable:
      Description: 'DynamoDB ARN'
      Value:
        'Fn::GetAtt': [RoleDynamoDBTable, Arn]

provider:
  name: aws
  region: us-east-1
  profile: serverless-admin
  stage: ${opt:stage, 'dev'}

layers:
  py38Runtime:
    package:
      artifact: runtime/python38_layer_runtime.zip

functions:
  api:
    runtime: python3.8
    handler: wsgi_handler.handler
    role: LambdaRole
    layers:
      - !Ref Py38RuntimeLambdaLayer
    events:
      - http:
        method: get
        path: health
        cors: true
        integration: mock
        response:
          template:
            application/json: '{"statusCode": 200}'
      - http:
        method: any
        path: '{proxy+}'
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiAuthorizer

plugins:
  - serverless-s3-sync
  - serverless-wsgi 

custom:
  UserTableName: 'users'
  RoleTableName: 'roles'
  s3Sync:
    - bucketName: palapalado.tk # required
      localDir: ../wild-rydes/public # required
      deleteRemoved: false # optional, indicates whether sync deletes files no longer present in localDir. Defaults to 'true'

  wsgi:
    app: api.app
    packRequirements: false
    #pythonBin: /home/ec2-user/.cache/pypoetry/virtualenvs/authmgmt-pKhbGNW1-py3.10/bin/python
    pythonBin: /home/ec2-user/aws-ec2-power-switcher/.venv/bin/python
